// üîß Test de Correction du Bug Canvas
// Script pour v√©rifier que l'erreur Chart.js est r√©solue

console.log("üîß Test correction bug Canvas Chart.js");

// 1. V√©rifier la disponibilit√© de Chart.js
function checkChartJS() {
    console.log("1Ô∏è‚É£ V√©rification Chart.js...");
    
    if (typeof Chart !== 'undefined') {
        console.log("‚úÖ Chart.js disponible, version:", Chart.version || 'inconnue');
        return true;
    } else {
        console.log("‚ùå Chart.js non disponible");
        return false;
    }
}

// 2. Tester la cr√©ation et destruction de graphiques
function testChartCreationDestruction() {
    console.log("2Ô∏è‚É£ Test cr√©ation/destruction graphiques...");
    
    // Cr√©er un canvas temporaire
    const tempCanvas = document.createElement('canvas');
    tempCanvas.id = 'test-canvas';
    tempCanvas.width = 400;
    tempCanvas.height = 200;
    document.body.appendChild(tempCanvas);
    
    try {
        // Cr√©er premier graphique
        console.log("üìä Cr√©ation graphique 1...");
        const chart1 = new Chart(tempCanvas, {
            type: 'line',
            data: {
                labels: ['A', 'B', 'C'],
                datasets: [{
                    label: 'Test 1',
                    data: [1, 2, 3],
                    borderColor: '#00d4ff'
                }]
            },
            options: { responsive: false }
        });
        console.log("‚úÖ Graphique 1 cr√©√©");
        
        // D√©truire et recr√©er
        console.log("üóëÔ∏è Destruction graphique 1...");
        chart1.destroy();
        console.log("‚úÖ Graphique 1 d√©truit");
        
        // Cr√©er deuxi√®me graphique sur le m√™me canvas
        console.log("üìä Cr√©ation graphique 2 sur m√™me canvas...");
        const chart2 = new Chart(tempCanvas, {
            type: 'doughnut',
            data: {
                labels: ['X', 'Y'],
                datasets: [{
                    data: [10, 20],
                    backgroundColor: ['#ff006b', '#9d4edd']
                }]
            },
            options: { responsive: false }
        });
        console.log("‚úÖ Graphique 2 cr√©√© sans erreur");
        
        // Nettoyer
        chart2.destroy();
        tempCanvas.remove();
        console.log("‚úÖ Test r√©ussi - Pas d'erreur Canvas");
        
    } catch (error) {
        console.error("‚ùå Erreur lors du test:", error);
        tempCanvas.remove();
    }
}

// 3. Tester le refresh du dashboard
function testDashboardRefresh() {
    console.log("3Ô∏è‚É£ Test refresh dashboard...");
    
    const refreshBtn = document.querySelector('.refresh-btn');
    if (refreshBtn) {
        console.log("üîÑ Simulation clic refresh...");
        
        // Observer les erreurs console
        const originalError = console.error;
        let errorCount = 0;
        
        console.error = function(...args) {
            if (args[0] && args[0].includes('Canvas is already in use')) {
                errorCount++;
                console.log("‚ùå Erreur Canvas d√©tect√©e!");
            }
            originalError.apply(console, args);
        };
        
        // Cliquer plusieurs fois pour tester
        setTimeout(() => refreshBtn.click(), 100);
        setTimeout(() => refreshBtn.click(), 2000);
        setTimeout(() => refreshBtn.click(), 4000);
        
        // V√©rifier apr√®s 6 secondes
        setTimeout(() => {
            console.error = originalError;
            if (errorCount === 0) {
                console.log("‚úÖ Aucune erreur Canvas d√©tect√©e lors du refresh");
            } else {
                console.log(`‚ùå ${errorCount} erreur(s) Canvas d√©tect√©e(s)`);
            }
        }, 6000);
        
    } else {
        console.log("‚ùå Bouton refresh non trouv√©");
    }
}

// 4. V√©rifier l'√©tat des variables globales
function checkGlobalChartVariables() {
    console.log("4Ô∏è‚É£ V√©rification variables globales...");
    
    // Ces variables devraient √™tre d√©finies dans le dashboard
    const globalVars = ['visitsChart', 'sectionsChart', 'analyticsData'];
    
    globalVars.forEach(varName => {
        if (typeof window[varName] !== 'undefined') {
            console.log(`‚úÖ ${varName}: ${window[varName] ? 'd√©fini' : 'null'}`);
        } else {
            console.log(`‚ö†Ô∏è ${varName}: non d√©fini`);
        }
    });
}

// 5. Test de performance de Chart.js
function testChartPerformance() {
    console.log("5Ô∏è‚É£ Test performance Chart.js...");
    
    const startTime = performance.now();
    const tempCanvas = document.createElement('canvas');
    document.body.appendChild(tempCanvas);
    
    try {
        const chart = new Chart(tempCanvas, {
            type: 'line',
            data: {
                labels: Array.from({length: 100}, (_, i) => `Point ${i}`),
                datasets: [{
                    label: 'Performance Test',
                    data: Array.from({length: 100}, () => Math.random() * 100),
                    borderColor: '#00d4ff'
                }]
            },
            options: {
                responsive: false,
                animation: false
            }
        });
        
        const creationTime = performance.now() - startTime;
        console.log(`‚ö° Cr√©ation graphique: ${creationTime.toFixed(2)}ms`);
        
        const destroyStart = performance.now();
        chart.destroy();
        const destroyTime = performance.now() - destroyStart;
        console.log(`üóëÔ∏è Destruction graphique: ${destroyTime.toFixed(2)}ms`);
        
        tempCanvas.remove();
        
    } catch (error) {
        console.error("‚ùå Erreur test performance:", error);
        tempCanvas.remove();
    }
}

// Interface de test
console.log("üß™ Tests disponibles:");
console.log("- checkChartJS() : V√©rifier Chart.js");
console.log("- testChartCreationDestruction() : Test cr√©ation/destruction");
console.log("- testDashboardRefresh() : Test refresh dashboard");
console.log("- checkGlobalChartVariables() : Variables globales");
console.log("- testChartPerformance() : Test performance");

// Auto-ex√©cution des tests
console.log("\nüöÄ Ex√©cution automatique des tests...");
if (checkChartJS()) {
    setTimeout(testChartCreationDestruction, 1000);
    setTimeout(checkGlobalChartVariables, 2000);
    setTimeout(testChartPerformance, 3000);
    setTimeout(testDashboardRefresh, 4000);
} else {
    console.log("‚èπÔ∏è Tests arr√™t√©s - Chart.js non disponible");
}

console.log("\nüí° Info: Si vous √™tes sur le dashboard analytics,");
console.log("les tests de refresh d√©tecteront automatiquement les erreurs Canvas.");
